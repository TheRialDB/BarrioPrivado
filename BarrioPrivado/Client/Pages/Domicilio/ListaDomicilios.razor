@page "/domicilios"
@inject IHttpServicio http

<PageTitle>DOMICILIOS</PageTitle>

<HeadContent>
    <meta name="description" content="Listado de domicilios" />
</HeadContent>

<h3>Lista de Domicilios</h3>

<a class="btn btn-primary" href="domicilios/crear">Crear Domicilio</a>

<table>
    <tr>
        <th>Lote</th>
        <th>Manzana</th>
    </tr>

    @if (Error)
    {
        <tr>@Mensaje</tr>
    }
    else
    {
        @if (domicilios == null)
        {
            <tr>Cargando....</tr>
        }
        else if (domicilios.Count == 0)
        {
            <tr>no existen datos</tr>
        }
        else
        {
            @foreach (var item in domicilios)
            {
                <tr>
                    <td>@item.lote</td>
                    <td>@item.manzana</td>
                    <td>
                        <a class="btn btn-primary"
                           href="domicilios/editar/@item.codigoDomicilio">
                            Editar
                        </a>
                    </td>
                    <td>
                        <button class="btn btn-warning"
                        @onclick="()=>Eliminar(item)">
                            Borrar
                        </button>
                    </td>
                </tr>
            }
        }
    }
</table>
<Confirmacion @ref="confirmacion"
              verCancelar="true"
              verOk="true"
              textOk="Aceptar"
              Titulo="Borrar domicilio"
              onCancel="Cancelar"
              onConfirm="Borrar">
    <div>
        <h1>Está por borrar el domicilio @DomicilioBorrar.lote</h1>
        <br />
        ¿Está seguro que desea continuar?
    </div>
</Confirmacion>

@code {
    Confirmacion confirmacion;

    List<Domicilio>? domicilios;
    bool Error = false;
    string Mensaje = "";
    Domicilio DomicilioBorrar;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Leer();
    }

    private async Task Leer()
    {
        domicilios = null;
        var respuesta = await http.Get<List<Domicilio>>("api/Domicilios");
        Error = respuesta.Error;
        if (!respuesta.Error)
        {
            domicilios = respuesta.Respuesta;
        }
        else
        {
            Mensaje = await respuesta.ObtenerError();
        }
    }

    private void Cancelar()
    {
        confirmacion.Ocultar();
        DomicilioBorrar = null;
    }

    private async Task Eliminar(Domicilio domBorrar)
    {
        DomicilioBorrar = domBorrar;
        confirmacion.Ver();
    }

    private async Task Borrar()
    {
        var respuesta = await http.Delete($"api/Domicilios/{DomicilioBorrar.codigoDomicilio}");
        if (respuesta.Error)
        {
            var body = "error no se pudo borrar";
        }
        Cancelar();
        await Leer();
    }

}
